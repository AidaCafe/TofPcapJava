plugins {
    id 'java-library'
    id 'application'
    id 'maven-publish'
    id 'signing'
}

group = 'net.cassite'
version = '0.0.1'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    api 'io.vproxy:commons:1.1.2'
    api 'io.vproxy:pcap4j-core:1.8.3.3'
    api 'io.vproxy:pcap4j-packetfactory-static:1.8.3.3'
}

application {
    mainClassName = 'net.cassite.tofpcap.sample.SampleMain'
}

tasks.withType(JavaExec) {
    enableAssertions = System.getProperty("ea", "false") == "true"
    var netDebug = System.getProperty("javax.net.debug")
    if (netDebug != null) {
        systemProperty("javax.net.debug", netDebug);
    }
}

compileJava {
    doFirst {
        options.compilerArgs << '--module-path' << classpath.asPath
    }
}

sourceCompatibility = 17
targetCompatibility = 17

java {
    withSourcesJar()
    withJavadocJar()
}

javadoc {
    exclude '**/*.java'
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifactId 'tof-pcap-java'

            pom {
                name = 'tof-pcap-java'
                description = 'packet capture of Tower of Fantasy'
                url = 'http://github.com/wkgcass/TofPcapJava'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/wkgcass/TofPcapJava/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'wkgcass'
                        name = 'K.G. Wang'
                        email = 'wkgcass@hotmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/wkgcass/TofPcapJava.git'
                    developerConnection = 'scm:git:git://github.com/wkgcass/TofPcapJava.git'
                    url = 'https://github.com/wkgcass/TofPcapJava'
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username 'wkgcass'
                password System.getProperty("MavenPublishPassword")
            }
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.contains('-DEV') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    if (!System.getProperty("MavenLocalInstall", "false").equals("true")) {
        sign publishing.publications.maven
    }
}
